version: "3.8"
services:
  backend-flask:
    container_name: backend
    environment:
      OTEL_EXPORTER_OTLP_ENDPOINT: "https://api.honeycomb.io"
      OTEL_EXPORTER_OTLP_HEADERS: "x-honeycomb-team=${HONEYCOMB_API_KEY}"
      OTEL_SERVICE_NAME: "gitpod-docker-compose-backend-flask"
      FLASK_DEBUG: true
      ROLLBAR_ACCESS_TOKEN: ${ROLLBAR_ACCESS_TOKEN}
      FRONTEND_URL: "https://3000-${GITPOD_WORKSPACE_ID}.${GITPOD_WORKSPACE_CLUSTER_HOST}"
      BACKEND_URL: "https://4567-${GITPOD_WORKSPACE_ID}.${GITPOD_WORKSPACE_CLUSTER_HOST}"
      AWS_XRAY_URL: "*4567-${GITPOD_WORKSPACE_ID}.${GITPOD_WORKSPACE_CLUSTER_HOST}*"
      AWS_XRAY_DAEMON_ADDRESS: "xray-daemon:2000"
      AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
      AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
      AWS_SESSION_TOKEN: "${AWS_SESSION_TOKEN}"
      AWS_REGION: "eu-central-1"
      AWS_DEFAULT_REGION: "eu-central-1"
      AWS_COGNITO_USER_POOL_ID: "eu-central-1_cHak0stq0"
      AWS_COGNITO_USER_POOL_CLIENT_ID: "2okh3eig7ck2cg5ha70rl6rcge"
    build: ./backend-flask
    healthcheck:
      test: curl --fail -s http://localhost:4567/healthz || exit 1
      interval: 30s
      timeout: 30s
      retries: 3
    ports:
      - "4567:4567"
    volumes:
      - ./backend-flask:/backend-flask

  frontend-react-js:
    container_name: frontend
    environment:
      ROLLBAR_ACCESS_TOKEN: ${ROLLBAR_ACCESS_TOKEN}
      REACT_APP_BACKEND_URL: "https://4567-${GITPOD_WORKSPACE_ID}.${GITPOD_WORKSPACE_CLUSTER_HOST}"
      REACT_APP_AWS_PROJECT_REGION: "eu-central-1"
      REACT_APP_AWS_COGNITO_REGION: "eu-central-1"
      REACT_APP_AWS_USER_POOLS_ID: "eu-central-1_cHak0stq0"
      REACT_APP_CLIENT_ID: "2okh3eig7ck2cg5ha70rl6rcge"
    build: ./frontend-react-js
    healthcheck:
      test: curl --fail -s http://localhost:3000/healthz || exit 1
      interval: 30s
      timeout: 30s
      retries: 3
    ports:
      - "3000:3000"
    volumes:
      - ./frontend-react-js:/frontend-react-js

  dynamodb-local:
    container_name: dynamodb
    # https://stackoverflow.com/questions/67533058/persist-local-dynamodb-data-in-volumes-lack-permission-unable-to-open-databa
    # We needed to add user:root to get this working.
    user: root
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath ./data"
    image: "amazon/dynamodb-local:latest"
    ports:
      - "8000:8000"
    volumes:
      - "./docker/dynamodb:/home/dynamodblocal/data"
    working_dir: /home/dynamodblocal

  postgres-local:
    container_name: postgres
    image: postgres:13-alpine
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - db:/var/lib/postgresql/data

  xray-daemon:
    container_name: xray-daemon
    image: "amazon/aws-xray-daemon"
    environment:
      AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
      AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
      AWS_SESSION_TOKEN: "${AWS_SESSION_TOKEN}"
      AWS_REGION: "eu-central-1"
    command:
      - "xray -o -b xray-daemon:2000"
    ports:
      - 2000:2000/udp

# the name flag is a hack to change the default prepend folder
# name when outputting the image names
networks:
  internal-network:
    driver: bridge
    name: cruddur

volumes:
  db:
    driver: local
